
# task1
names = ["Maaz", "Talha", "Duraid", "Rafay", "Ali"]
for name in names:
    print(name)



# tASK2
guests = ["Duraid", "Wajhi", "Wasi"]

for guest in guests:
    print(f"Dear {guest},\nI would be honored to invite you to dinner!\n")



# TASK3
guests = ["Duraid", "Wajhi", "Wasi"]
guests[2] = "Talha"
for guest in guests:
    print(f"Dear {guest},\nI would be honored to invite you to dinner!\n")



# TASK4
class Employee:
    employee_count = 0

    def __init__(self, empName, salary):
        self.empName = empName
        self.salary = salary
        Employee.employee_count += 1 

    @staticmethod
    def displayCount():
        print(f"Total number of employees: {Employee.employee_count}")

    def displayEmployee(self):
        print(f"Employee Name: {self.empName}, Salary: {self.salary}")

emp1 = Employee("Ali", 50000)
emp2 = Employee("Maaz", 60000)
emp3 = Employee("Rafay", 55000)

Employee.displayCount()

emp1.displayEmployee()
emp2.displayEmployee()
emp3.displayEmployee()



# TASK5
import queue
lifo_queue = queue.LifoQueue()

lifo_queue.put(10)
lifo_queue.put(20)
lifo_queue.put(30)
lifo_queue.put(40)

print("Items in LIFO order:")
while not lifo_queue.empty():
    item = lifo_queue.get()
    print(item)



# TASK6
import queue
pq = queue.PriorityQueue()
arr = [4, 8, 1, 7, 3]
for num in arr:
    pq.put(-num)
print("Elements in max-priority queue in order of priority:")
while not pq.empty():
    print(-pq.get())



# task7
class Vertex:
    def __init__(self, name):
        self.name = name
        self.neighbors = []

    def add_neighbor(self, neighbor):
        self.neighbors.append(neighbor)

    def __repr__(self):
        return f"Vertex({self.name})"
class Graph:
    def __init__(self):
        self.vertices = {}
    def add_vertex(self, vertex):
        if vertex.name not in self.vertices:
            self.vertices[vertex.name] = vertex
        else:
            print(f"Vertex {vertex.name} already exists.")
    def add_vertices(self, vertices):
        for vertex in vertices:
            self.add_vertex(vertex)
    def add_edge(self, start, end):
        if start in self.vertices and end in self.vertices:
            self.vertices[start].add_neighbor(self.vertices[end])
            self.vertices[end].add_neighbor(self.vertices[start])
        else:
            print(f"One or both vertices {start} and {end} do not exist.")

    def display_graph(self):
        for vertex in self.vertices.values():
            neighbors = [neighbor.name for neighbor in vertex.neighbors]
            print(f"{vertex.name} -> {', '.join(neighbors)}")
graph = Graph()
A = Vertex("A")
B = Vertex("B")
C = Vertex("C")
D = Vertex("D")
E = Vertex("E")
graph.add_vertices([A, B, C, D, E])

graph.add_edge("A", "B")
graph.add_edge("A", "C")
graph.add_edge("A", "E")
graph.add_edge("B", "C")
graph.add_edge("C", "D")
graph.add_edge("C", "E")
graph.display_graph()
